{"version":3,"file":"static/js/115.a8653764.chunk.js","mappings":"0LAEaA,EAAS,WACpB,OAAO,qCACR,C,kHCuDD,UAtDC,WACC,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBF,GAAa,GADK,mBAGOG,EAAAA,EAAAA,IAAkBT,GAHzB,OAGVU,EAHU,OAIhBC,QAAQC,IAAI,wBAAyBF,GACrCN,EAAUM,GALM,gDAOhBC,QAAQC,IAAI,aAAZ,MAPgB,yBAShBN,GAAa,GATG,4EAAH,qDAYjBE,GACD,GAAE,CAACR,KAGF,2BACGK,IAAa,SAAC,IAAD,IACbF,IACC,iCACE,oCACA,0BACE,wBACGA,EAAOU,KAAKC,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACtC,OACE,2BACE,gBACEC,IACEF,EAAY,yCAC0BA,GAD1B,sCAIdG,IAAI,SACJC,MAAM,MACNC,MAAO,CAAEC,aAAc,WAEzB,mCAAWP,MACX,uCAAeE,OAZRF,EAeZ,aAOd,C,sLC1DKQ,EAAU,mCACVC,EAAW,+BAIJC,EAAmB,mCAAG,6GAERC,MAAM,GAAD,OACvBF,EADuB,qCACcD,IAHX,cAEzBb,EAFyB,gBAKlBA,EAASiB,OALS,iIAAH,qDAWnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENH,MAAM,KAAD,OAE9BF,EAF8B,iCAEGD,EAFH,yBAE2BM,IAJ1B,cAEvBnB,EAFuB,gBAMhBA,EAASiB,OANO,iIAAH,sDAYjBG,EAAe,mCAAG,WAAM9B,GAAN,gGAEJ0B,MAAM,GAAD,OACvBF,EADuB,kBACLxB,EADK,oBACcuB,EADd,oBAFD,cAErBb,EAFqB,gBAKdA,EAASiB,OALK,iIAAH,sDAWflB,EAAiB,mCAAG,WAAMT,GAAN,gGAEN0B,MAAM,KAAD,OAC9BF,EAD8B,kBACZxB,EADY,6BACgBuB,EADhB,oBAFC,cAEvBb,EAFuB,gBAIhBA,EAASiB,OAJO,iIAAH,sDAUjBI,EAAkB,mCAAG,WAAM/B,GAAN,gGAEP0B,MAAM,GAAD,OACvBF,EADuB,kBACLxB,EADK,4BACsBuB,EADtB,2BAFE,cAExBb,EAFwB,gBAKjBA,EAASiB,OALQ,iIAAH,qD,sBCjD/B,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/Loader/Loader.jsx","pages/Cast/Cast.jsx","service/ApiServiceFetch.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React from 'react';\n\nexport const Loader = () => {\n  return <p>Loading...</p>;\n};\n","import { fetchMovieCredits } from '../../service/ApiServiceFetch';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\n\n function Cast() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieCredits(movieId);\n        console.log('response Credits :>> ', response);\n        setActors(response);\n      } catch (error) {\n        console.log('error :>> ', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {actors && (\n        <>\n          <h2>Actors</h2>\n          <div>\n            <ul>\n              {actors.cast.map(({ name, profile_path, character }) => {\n                return (\n                  <li key={name}>\n                    <img\n                      src={\n                        profile_path\n                          ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                          : `https://via.placeholder.com/395x574`\n                      }\n                      alt=\"{name}\"\n                      width=\"170\"\n                      style={{ borderRadius: '15px' }}\n                    />\n                    <h3>Name: {name}</h3>\n                    <p>Character: {character}</p>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\nexport default Cast;","const API_KEY = '631075854851454119cb09d20165cf60';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n//? список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n//?  пошук фільму за ключовим словом на сторінці фільмів.\n\nexport const fetchMoviesSearch = async search => {\n  try {\n    const response = await fetch(\n      `\n${BASE_URL}/search/movie?api_key=${API_KEY}&page=1&query=${search}`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит повної інформації про фільм для сторінки кінофільму.\n\nexport const fetchInfoMovies = async movieId => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит інформації про акторський склад для сторінки кінофільму.\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await fetch(`\n${BASE_URL}/movie/${movieId}/credits?&api_key=${API_KEY}&language=en-US`);\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит оглядів для сторінки кінофільму.\n\nexport const fetchMoviesReviews = async movieId => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Loader","movieId","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","fetchMovies","fetchMovieCredits","response","console","log","cast","map","name","profile_path","character","src","alt","width","style","borderRadius","API_KEY","BASE_URL","fetchTrendingMovies","fetch","json","fetchMoviesSearch","search","fetchInfoMovies","fetchMoviesReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}